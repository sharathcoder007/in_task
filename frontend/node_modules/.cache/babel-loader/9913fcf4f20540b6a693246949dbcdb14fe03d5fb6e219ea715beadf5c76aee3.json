{"ast":null,"code":"var _jsxFileName = \"/Users/sharathrajkumar/in_task/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport ChatInterface from './components/ChatInterface';\nimport LivePreview from './components/LivePreview';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [generatedCode, setGeneratedCode] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedProvider, setSelectedProvider] = useState('auto');\n  const [availableProviders, setAvailableProviders] = useState({});\n  const [chatHistory, setChatHistory] = useState([{\n    id: 1,\n    type: 'system',\n    message: 'Hello! I\\'m your AI web development assistant. I can use either OpenAI or Gemini to generate websites. Choose your preferred provider or let me auto-select the best available option.'\n  }]);\n\n  // Fetch available providers on component mount\n  useEffect(() => {\n    fetchAvailableProviders();\n  }, []);\n  const fetchAvailableProviders = async () => {\n    try {\n      const response = await fetch('/api/config');\n      const data = await response.json();\n      setAvailableProviders(data.availableProviders);\n      if (data.defaultProvider) {\n        setSelectedProvider(data.defaultProvider);\n      }\n    } catch (error) {\n      console.error('Failed to fetch providers:', error);\n    }\n  };\n  const handleGenerateWebsite = async prompt => {\n    setIsLoading(true);\n\n    // Add user message to chat\n    const userMessage = {\n      id: Date.now(),\n      type: 'user',\n      message: prompt\n    };\n    setChatHistory(prev => [...prev, userMessage]);\n    try {\n      const response = await fetch('/api/generate-website', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prompt,\n          provider: selectedProvider === 'auto' ? 'auto' : selectedProvider\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        setGeneratedCode(data.code);\n\n        // Add AI response to chat with provider info\n        const aiMessage = {\n          id: Date.now() + 1,\n          type: 'ai',\n          message: `I've created a website using ${data.llmProvider.toUpperCase()} based on your request: \"${prompt}\". The website is now displayed in the preview panel on the right. You can continue to refine it by asking for changes!`\n        };\n        setChatHistory(prev => [...prev, aiMessage]);\n      } else {\n        throw new Error(data.error || 'Failed to generate website');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n\n      // Add error message to chat\n      const errorMessage = {\n        id: Date.now() + 1,\n        type: 'error',\n        message: `Sorry, I encountered an error: ${error.message}. Please check your API key configuration.`\n      };\n      setChatHistory(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleProviderChange = provider => {\n    setSelectedProvider(provider);\n    const message = {\n      id: Date.now(),\n      type: 'system',\n      message: `Switched to ${provider === 'auto' ? 'auto-selection' : provider.toUpperCase()} provider.`\n    };\n    setChatHistory(prev => [...prev, message]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"\\uD83D\\uDE80 Cloud IDE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"AI-Powered Web Development\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"provider-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"provider-select\",\n          children: \"LLM Provider: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"provider-select\",\n          value: selectedProvider,\n          onChange: e => handleProviderChange(e.target.value),\n          className: \"provider-dropdown\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"auto\",\n            children: \"Auto (Best Available)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this), availableProviders.gemini && /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"gemini\",\n            children: \"Gemini\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 43\n          }, this), availableProviders.openai && /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"openai\",\n            children: \"OpenAI\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 43\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"app-main\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ide-container\",\n        children: [/*#__PURE__*/_jsxDEV(ChatInterface, {\n          onGenerateWebsite: handleGenerateWebsite,\n          chatHistory: chatHistory,\n          isLoading: isLoading,\n          selectedProvider: selectedProvider\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LivePreview, {\n          code: generatedCode,\n          isLoading: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"SM77FjyYqmjVqYWbzsaUnmRARW4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","ChatInterface","LivePreview","jsxDEV","_jsxDEV","App","_s","generatedCode","setGeneratedCode","isLoading","setIsLoading","selectedProvider","setSelectedProvider","availableProviders","setAvailableProviders","chatHistory","setChatHistory","id","type","message","fetchAvailableProviders","response","fetch","data","json","defaultProvider","error","console","handleGenerateWebsite","prompt","userMessage","Date","now","prev","method","headers","body","JSON","stringify","provider","success","code","aiMessage","llmProvider","toUpperCase","Error","errorMessage","handleProviderChange","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","value","onChange","e","target","gemini","openai","onGenerateWebsite","_c","$RefreshReg$"],"sources":["/Users/sharathrajkumar/in_task/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport ChatInterface from './components/ChatInterface';\nimport LivePreview from './components/LivePreview';\nimport './App.css';\n\nfunction App() {\n  const [generatedCode, setGeneratedCode] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedProvider, setSelectedProvider] = useState('auto');\n  const [availableProviders, setAvailableProviders] = useState({});\n  const [chatHistory, setChatHistory] = useState([\n    {\n      id: 1,\n      type: 'system',\n      message: 'Hello! I\\'m your AI web development assistant. I can use either OpenAI or Gemini to generate websites. Choose your preferred provider or let me auto-select the best available option.'\n    }\n  ]);\n\n  // Fetch available providers on component mount\n  useEffect(() => {\n    fetchAvailableProviders();\n  }, []);\n\n  const fetchAvailableProviders = async () => {\n    try {\n      const response = await fetch('/api/config');\n      const data = await response.json();\n      setAvailableProviders(data.availableProviders);\n      if (data.defaultProvider) {\n        setSelectedProvider(data.defaultProvider);\n      }\n    } catch (error) {\n      console.error('Failed to fetch providers:', error);\n    }\n  };\n\n  const handleGenerateWebsite = async (prompt) => {\n    setIsLoading(true);\n    \n    // Add user message to chat\n    const userMessage = {\n      id: Date.now(),\n      type: 'user',\n      message: prompt\n    };\n    setChatHistory(prev => [...prev, userMessage]);\n\n    try {\n      const response = await fetch('/api/generate-website', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          prompt,\n          provider: selectedProvider === 'auto' ? 'auto' : selectedProvider\n        }),\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        setGeneratedCode(data.code);\n        \n        // Add AI response to chat with provider info\n        const aiMessage = {\n          id: Date.now() + 1,\n          type: 'ai',\n          message: `I've created a website using ${data.llmProvider.toUpperCase()} based on your request: \"${prompt}\". The website is now displayed in the preview panel on the right. You can continue to refine it by asking for changes!`\n        };\n        setChatHistory(prev => [...prev, aiMessage]);\n      } else {\n        throw new Error(data.error || 'Failed to generate website');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      \n      // Add error message to chat\n      const errorMessage = {\n        id: Date.now() + 1,\n        type: 'error',\n        message: `Sorry, I encountered an error: ${error.message}. Please check your API key configuration.`\n      };\n      setChatHistory(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleProviderChange = (provider) => {\n    setSelectedProvider(provider);\n    const message = {\n      id: Date.now(),\n      type: 'system',\n      message: `Switched to ${provider === 'auto' ? 'auto-selection' : provider.toUpperCase()} provider.`\n    };\n    setChatHistory(prev => [...prev, message]);\n  };\n\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <div className=\"header-content\">\n          <h1>🚀 Cloud IDE</h1>\n          <p>AI-Powered Web Development</p>\n        </div>\n        <div className=\"provider-selector\">\n          <label htmlFor=\"provider-select\">LLM Provider: </label>\n          <select \n            id=\"provider-select\"\n            value={selectedProvider}\n            onChange={(e) => handleProviderChange(e.target.value)}\n            className=\"provider-dropdown\"\n          >\n            <option value=\"auto\">Auto (Best Available)</option>\n            {availableProviders.gemini && <option value=\"gemini\">Gemini</option>}\n            {availableProviders.openai && <option value=\"openai\">OpenAI</option>}\n          </select>\n        </div>\n      </header>\n      \n      <main className=\"app-main\">\n        <div className=\"ide-container\">\n          <ChatInterface \n            onGenerateWebsite={handleGenerateWebsite}\n            chatHistory={chatHistory}\n            isLoading={isLoading}\n            selectedProvider={selectedProvider}\n          />\n          <LivePreview \n            code={generatedCode}\n            isLoading={isLoading}\n          />\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}